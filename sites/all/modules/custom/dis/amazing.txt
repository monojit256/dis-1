<?php

/**
 * Implementation of hook_form_FORM_ID_alter()
 * 1. Alter Company Code and Division Codes in taxonomies Company and Division respectively
 * 2. Hide description and relations field in taxonomies Company and Division
 */
function dis_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {

    if (is_array($form['#term'])) {

        if ($form['#term']['vocabulary_machine_name'] == 'company') {

            $form['name']['#title'] = 'Company Code';
            $form['name']['#maxlength'] = 3;
            $form['name']['#size'] = 3;

            $form['description']['#access'] = FALSE;
            $form['relations']['#access'] = FALSE;
        }

        if ($form['#term']['vocabulary_machine_name'] == 'division') {

            $form['name']['#title'] = 'Division Code';
            $form['name']['#maxlength'] = 4;
            $form['name']['#size'] = 4;

            $form['description']['#access'] = FALSE;
            $form['relations']['#access'] = FALSE;
        }
    }
}

/*
 * Implementation of hook_menu()
 * 1. Menu Callback for Add Supply Location
 * 2. Menu Callback for Add Sales Mapping
 * 3. Menu Callback for Add Outward Movement
 */

function dis_menu() {

    $items = array();

    $items['add-supply-location/%'] = array(
        'title' => 'Add Supply Location',
        'page callback' => 'add_supply_location',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['add-sales-mapping/%'] = array(
        'title' => 'Add Sales Mapping - Select Company and Division',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_sales_mapping_form', 1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['add-outward-movement/%/%'] = array(
        'title' => 'Add Outward Movement - Select Company and Division',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_outward_movement_form', 1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['add-inward-movement/%/%'] = array(
        'title' => 'Add Inward Movement - Select Company and Division',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_inward_movement_form', 1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['add-inward-permit-received'] = array(
        'title' => 'Add Inward Permit Received',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_inward_permit_received_form'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['add-outward-permit-received'] = array(
        'title' => 'Add Outward Permit Received',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_outward_permit_received_form'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/*
 * Implementation of Menu Callback for Add Supply Location
 */

function add_supply_location($term_name) {

    $items = array();
    $items = taxonomy_get_term_by_name($term_name, 'supply_location_types');
    $item = array_shift($items);

    drupal_goto('node/add/supply-location/' . $term_name, array('query' => array('field_location_type' => $item->tid)));
}

/*
 * Implements hook_form_alter()
 */

function dis_form_alter(&$form, &$form_state, $form_id) {

    switch ($form['#form_id']) {

        case 'supply_location_node_form':
            if (!empty($form['field_company']['und']['#default_value']))
                $form['field_company']['#disabled'] = TRUE;
            break;

        case 'sales_team_member_node_form':
            if (!empty($form['field_company']['und']['#default_value']))
                $form['field_company']['#disabled'] = TRUE;
            break;

        case 'location_sales_team_mapping_node_form':
            if (!empty($form['field_company']['und']['#default_value']))
                $form['field_company']['#disabled'] = TRUE;
            if (!empty($form['field_division']['und']['#default_value']))
                $form['field_division']['#disabled'] = TRUE;
            if (!empty($form['field_supply_location']['und']['#default_value']))
                $form['field_supply_location']['#disabled'] = TRUE;
            break;

        case 'outward_movement_node_form':
            if (!empty($form['field_outward_movement_type']['und']['#default_value']))
                $form['field_outward_movement_type']['#disabled'] = TRUE;
            if (!empty($form['field_company']['und']['#default_value']))
                $form['field_company']['#disabled'] = TRUE;
            if (!empty($form['field_division']['und']['#default_value']))
                $form['field_division']['#disabled'] = TRUE;
            if (!empty($form['field_supply_location']['und']['#default_value']))
                $form['field_supply_location']['#disabled'] = TRUE;
            break;

        case 'inward_movement_node_form':
            if (!empty($form['field_inward_movement_type']['und']['#default_value']))
                $form['field_inward_movement_type']['#disabled'] = TRUE;
            if (!empty($form['field_company']['und']['#default_value']))
                $form['field_company']['#disabled'] = TRUE;
            if (!empty($form['field_division']['und']['#default_value']))
                $form['field_division']['#disabled'] = TRUE;
            if (!empty($form['field_supply_location']['und']['#default_value']))
                $form['field_supply_location']['#disabled'] = TRUE;
            break;

        case 'feeds_import_form':
            if ($form['#importer_id'] == 'invoice_importer') {
                $form['source_status']['#access'] = FALSE;
                $form['feeds']['FeedsCSVParser']['help']['list']['#items']['0'] = 'All columns except \'Form C Required\' are required fields';
                $form['feeds']['FeedsCSVParser']['help']['list']['#items']['2'] = 'For Division and Company columns, the three-digit codes should be provided. All other values will be returned as invalid';
                $form['feeds']['FeedsCSVParser']['help']['list']['#items']['3'] = 'Invoice date should be provided in one of the following formats: mm/dd/yyyy or mm-dd-yyyy';
                $form['feeds']['FeedsCSVParser']['help']['list']['#items']['4'] = 'Do not provide any value for column \'Type\'';
                $form['feeds']['FeedsCSVParser']['help']['list']['#items']['5'] = 'If Form C is required, please provide \'Yes\' in the column \'Form C Required\'';
                $form['feeds']['FeedsCSVParser']['delimiter']['#access'] = FALSE;
                $form['feeds']['FeedsCSVParser']['no_headers']['#access'] = FALSE;
            }
            break;

        case 'views_exposed_form':
            if ($form_state['view']->name == 'dispatch_register') {
                $form['field_company_target_id']['#ajax'] = array(
                    'event' => 'change',
                    'callback' => 'division_ajax_callback',
                    'wrapper' => 'division-options-replace'
                );
                /*   if (!empty($form_state['values'])) {
                  $form_state['input'] = array_merge($form_state['input'], $form_state['values']);
                  }
                  $form_state['values'] = $form_state['input']; */

                if (!empty($form_state['values'])) {
                    $form_state['input'] = array_merge($form_state['input'], $form_state['values']);
                }

                $value_company = (isset($form_state['input']['field_company_target_id']) && $form_state['input']['field_company_target_id'] != 'All') ? $form_state['input']['field_company_target_id'] : -1;

                $form['field_division_target_id']['#prefix'] = '<div id="division-options-replace">';
                $form['field_division_target_id']['#suffix'] = '</div>';
                $form['field_division_target_id']['#options'] = division_dropdown_options($value_company);
            }
            break;
            
        case 'packing_node_form':
            $a = 1;
            $b - 1;
    }
}

/*
 * Function to attach existing CCK fields into custom forms
 */

function my_field_attach_form($field_name, $entity_type, $bundle, $entity, &$form, &$form_state, $langcode = NULL) {

    // Set #parents to 'top-level' if it doesn't exist.
    $form += array('#parents' => array());

    // If no language is provided use the default site language.
    $options = array(
        'language' => field_valid_language($langcode),
        'default' => TRUE,
    );

    // Append to the form
    ctools_include('fields');
    $field_instance = field_info_instance($entity_type, $field_name, $bundle);
    $form += (array) ctools_field_invoke_field($field_instance, 'form', $entity_type, $entity, $form, $form_state, $options);
}

/*
 * Implementation of Menu Callback form for Add Sales Mapping
 */

function add_sales_mapping_form($form, &$form_state, $term_name) {
    $form = array();
    $node = new stdClass();
    $node->type = 'outward_movement';
    my_field_attach_form('field_company', 'node', 'outward_movement', $node, $form, $form_state, LANGUAGE_NONE);
    my_field_attach_form('field_division', 'node', 'outward_movement', $node, $form, $form_state, LANGUAGE_NONE);

    $form['field_company']['und']['#ajax'] = array(
        'event' => 'change',
        'callback' => 'division_ajax_callback',
        'wrapper' => 'division-options-replace'
    );

    $value_company = isset($form_state['values']['field_company']) ? $form_state['values']['field_company']['und']['0']['target_id'] : -1;

    $form['field_division']['und']['#prefix'] = '<div id="division-options-replace">';
    $form['field_division']['und']['#suffix'] = '</div>';
    $form['field_division']['und']['#options'] = division_dropdown_options($value_company);

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Continue'),
        '#weight' => 5
    );
    return $form;
}

function add_sales_mapping_form_submit($form, &$form_state) {

    $term_name = $form_state['build_info']['args']['0'];

    $items = array();
    $items = taxonomy_get_term_by_name($term_name, 'supply_location_types');
    $item = array_shift($items);

    $company_tid = $form_state['input']['field_company']['und'];
    $division_tid = $form_state['input']['field_division']['und'];

    $form_state['redirect'] = array(
        'node/add/location-sales-team-mapping/' . $term_name . '/' . $company_tid,
        array(
            'query' => array(
                'field_company' => $company_tid,
                'field_division' => $division_tid
            )
        )
    );
}

/*
 * Implementation of Menu Callback form for Add Outward Movement
 */

function add_outward_movement_form($form, &$form_state, $location_type_name, $outward_type_name) {
    $form = array();
    $node = new stdClass();
    $node->type = 'outward_movement';
    my_field_attach_form('field_company', 'node', 'outward_movement', $node, $form, $form_state, LANGUAGE_NONE);
    my_field_attach_form('field_division', 'node', 'outward_movement', $node, $form, $form_state, LANGUAGE_NONE);

    $form['field_company']['und']['#ajax'] = array(
        'event' => 'change',
        'callback' => 'division_ajax_callback',
        'wrapper' => 'division-options-replace'
    );

    $value_company = isset($form_state['values']['field_company']) ? $form_state['values']['field_company']['und']['0']['target_id'] : -1;

    $form['field_division']['und']['#prefix'] = '<div id="division-options-replace">';
    $form['field_division']['und']['#suffix'] = '</div>';
    $form['field_division']['und']['#options'] = division_dropdown_options($value_company);

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Continue'),
        '#weight' => 5
    );
    return $form;
}

function add_outward_movement_form_submit($form, &$form_state) {

    $location_type_name = $form_state['build_info']['args']['0'];
    $outward_type_name = $form_state['build_info']['args']['1'];

    $items = array();
    $items = taxonomy_get_term_by_name($outward_type_name, 'outward_movement_types');
    $item = array_shift($items);

    $company_tid = $form_state['input']['field_company']['und'];
    $division_tid = $form_state['input']['field_division']['und'];

    $form_state['redirect'] = array(
        'node/add/outward-movement/' . $location_type_name . '/' . $company_tid . '/' . $outward_type_name,
        array(
            'query' => array(
                'field_company' => $company_tid,
                'field_division' => $division_tid,
                'field_outward_movement_type' => $item->tid,
            )
        )
    );
}

/**
 * Selects just the second dropdown to be returned for re-rendering
 *
 * Since the controlling logic for populating the form is in the form builder
 * function, all we do here is select the element and return it to be updated.
 *
 * @return renderable array (the second dropdown)
 */
function division_ajax_callback($form, $form_state) {

    if (isset($form['field_division'])) {
        return $form['field_division'];
    } else {
        return $form['field_division_target_id']; //Views exposed filter uses field_division_target_id as filter field.
    }
}

function division_dropdown_options($value_company) {
    if ($value_company == -1)
        $view_result = views_get_view_result('division_by_company', 'default');
    else
        $view_result = views_get_view_result('division_by_company', 'default', $value_company);

    $options = array();
    $options['_none'] = t(' - Select a value - ');
    foreach ($view_result as $object) {
        $options[$object->tid] = $object->field_field_division_name['0']['raw']['value'];
    }

    return $options;
}

/*
 * Implement hook_feeds_after_parse()
 */

function dis_feeds_after_parse($source, $result) {
    $items = array();
    $items_new = array();
    $items = $result->items;
    $id = $source->id;

    if ($id == "invoice_importer") {

        //Fetch Entity ID of term 'Sales Invoice' of Outward Movement Type
        $movement_type_query = new EntityFieldQuery();
        $movement_type_query->entityCondition('entity_type', 'taxonomy_term')
                ->entityCondition('bundle', 'outward_movement_types')
                ->propertyCondition('name', 'Sales Invoice');
        $movement_type_result = $movement_type_query->execute();
        $movement_type_id = array_shift($movement_type_result['taxonomy_term'])->tid;

        foreach ($items as $key => $item) {

            //Prefix part of every status message pertaining to each Feeds item
            $message = $item['company'] . '-' . $item['division'] . '-' . $item['customer'] . '-' . $item['invoice no'];

            //Check if the Company code provided in Feeds item exists
            //If so, fetch Entity ID of the Company            
            $company_query = new EntityFieldQuery();
            $company_query->entityCondition('entity_type', 'taxonomy_term')
                    ->entityCondition('bundle', 'company')
                    ->propertyCondition('name', $item['company']);
            $company_result = $company_query->execute();
            if (empty($company_result)) {
                drupal_set_message($message . ': Importing failed - Invalid Company Code', $type = "status");
                continue;
            } else {
                $company_id = array_shift($company_result['taxonomy_term'])->tid;
            }

            //Check if the Division code provided in Feeds item exists and belongs to
            //the same Company provided above
            //If so, fetch Entity ID of the Division            
            $division_query = new EntityFieldQuery();
            $division_query->entityCondition('entity_type', 'taxonomy_term')
                    ->entityCondition('bundle', 'division')
                    ->propertyCondition('name', $item['division'])
                    ->fieldCondition('field_company', 'target_id', $company_id, '=');
            $division_result = $division_query->execute();
            if (empty($division_result)) {
                drupal_set_message($message . ': Importing failed - Invalid Division Code', $type = "status");
                continue;
            } else {
                $division_id = array_shift($division_result['taxonomy_term'])->tid;
            }

            //Fetch Entity ID of term 'Customer' of Supply Location Type
            $location_query = new EntityFieldQuery();
            $location_query->entityCondition('entity_type', 'taxonomy_term')
                    ->entityCondition('bundle', 'supply_location_types')
                    ->propertyCondition('name', 'Customer');
            $location_result = $location_query->execute();
            $location_id = array_shift($location_result['taxonomy_term'])->tid;

            //Check if the Customer provided in Feeds item exists and belongs to
            //the same Company provided above
            //If so, fetch Entity ID of the Division 
            $customer_query = new EntityFieldQuery();
            $customer_query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'supply_location')
                    ->propertyCondition('status', 1)
                    ->fieldCondition('field_location_type', 'target_id', $location_id, '=')
                    ->fieldCondition('field_company', 'target_id', $company_id, '=')
                    ->fieldCondition('field_name', 'value', $item['customer'], '=');
            $customer_result = $customer_query->execute();
            if (empty($customer_result)) {
                drupal_set_message($message . ': Importing failed - Invalid Customer', $type = "status");
                continue;
            } else {
                $customer_id = array_shift(array_shift($customer_result))->nid;
            }

            //Check if any of Invoice No, Invoice Date or Invoice Value is empty
            if (empty($item['invoice no']) || empty($item['invoice date']) || !is_numeric($item['invoice value'])) {
                drupal_set_message($message . ': Importing failed - One or more of Invoice No, Invoice Date or Invoice Value is missing', $type = "status");
                continue;
            }

            //Check if Invoice Date is valid
            $date = date_parse($item['invoice date']);
            if (!checkdate($date["month"], $date["day"], $date["year"])) {
                drupal_set_message($message . ': Importing failed - Invoice Date is invalid', $type = "status");
                continue;
            }

            //Check if Invoice No already exists for this Company in this Financial Year
            $quarter_fy = array();
            $quarter_fy = get_quarter_financialyear($item['invoice date']);
            $fy_id = $quarter_fy['financial_year'];
            $invoice_query = new EntityFieldQuery();
            $invoice_query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'outward_movement')
                    ->propertyCondition('status', 1)
                    ->fieldCondition('field_outward_movement_type', 'target_id', $movement_type_id, '=')
                    ->fieldCondition('field_company', 'target_id', $company_id, '=')
                    ->fieldCondition('field_financial_year', 'target_id', $fy_id, '=')
                    ->fieldCondition('field_invoice_no', 'value', $item['invoice no'], '=');
            $invoice_result = $invoice_query->execute();
            if (!empty($invoice_result)) {
                drupal_set_message($message . ': Importing failed - Invoice No already exists', $type = "status");
                continue;
            }

            //Check Form C required Colum
            //If yes, then set value as 1. For all other values, set value as 0
            if (!empty($item['form c required'])) {
                if ($item['form c required'] == 'Yes') {
                    $item['form c required'] = 1;
                } else {
                    $item['form c required'] = 0;
                }
            }

            //Update Entity IDs in each Feed item
            $item['type'] = $movement_type_id;
            $item['company'] = $company_id;
            $item['division'] = $division_id;
            $item['customer'] = $customer_id;


            //Check if there are duplicate entries in the imported file
            $duplicate = FALSE;
            foreach ($items_new as $item_new) {
                if ($item['company'] == $item_new['company'] &&
                        $item['invoice no'] == $item_new['invoice no'] &&
                        $item['invoice date'] == $item_new['invoice date']) {
                    $duplicate = TRUE;
                }
            }

            //Add feed item to new feeds list if not duplicate
            if ($duplicate == FALSE) {
                $items_new[] = $item;
                drupal_set_message($message . ': Importing successful', $type = "status");
            } else {
                drupal_set_message($message . ': Importing failed: Duplicate Entry in Import file', $type = "status");
            }
        }

        $result->items = $items_new;
    }
}

/*
 * Function to return the financial year and quarter for a given date
 * Compatible with 'Set Quarter and FY' Rules Action
 */

function get_quarter_financialyear($invoice_date) {

    //$date = format_date($invoice_date);
    $d = date_parse_from_format("d-m-Y", $invoice_date);
    $month = $d['month'];
    $year = $d['year'];

    //Determine quarter
    if ($month == '1' || $month == '2' || $month == '3')
        $quarter = 'Q4';
    elseif ($month == '4' || $month == '5' || $month == '6')
        $quarter = 'Q1';
    elseif ($month == '7' || $month == '8' || $month == '9')
        $quarter = 'Q2';
    else
        $quarter = 'Q3';

    //Determine Financial Year
    if ($quarter == 'Q4') {
        $first_year = $year - 1;
        $second_year = $year % 100;
        $financial_year = $first_year . '-' . $second_year;
    } else {
        $first_year = $year;
        $second_year = ($year + 1) % 100;
        $financial_year = $first_year . '-' . $second_year;
    }

    //Fetch Entity IDs for Quarter and Financial Year
    $quarter_query = new EntityFieldQuery();
    $quarter_query->entityCondition('entity_type', 'taxonomy_term')
            ->entityCondition('bundle', 'quarter')
            ->propertyCondition('name', $quarter);
    $quarter_result = $quarter_query->execute();
    $quarter_id = array_shift($quarter_result['taxonomy_term'])->tid;

    $fy_query = new EntityFieldQuery();
    $fy_query->entityCondition('entity_type', 'taxonomy_term')
            ->entityCondition('bundle', 'financial_year')
            ->propertyCondition('name', $financial_year);
    $fy_result = $fy_query->execute();
    $fy_id = array_shift($fy_result['taxonomy_term'])->tid;

    return array(
        'quarter' => $quarter_id,
        'financial_year' => $fy_id,
    );
}

/*
 * Implementation of Menu Callback form for Add Outward Movement
 */

function add_inward_movement_form($form, &$form_state, $location_type_name, $outward_type_name) {
    $form = array();
    $node = new stdClass();
    $node->type = 'inward_movement';
    my_field_attach_form('field_company', 'node', 'inward_movement', $node, $form, $form_state, LANGUAGE_NONE);
    my_field_attach_form('field_division', 'node', 'inward_movement', $node, $form, $form_state, LANGUAGE_NONE);

    $form['field_company']['und']['#ajax'] = array(
        'event' => 'change',
        'callback' => 'division_ajax_callback',
        'wrapper' => 'division-options-replace'
    );

    $value_company = isset($form_state['values']['field_company']) ? $form_state['values']['field_company']['und']['0']['target_id'] : -1;

    $form['field_division']['und']['#prefix'] = '<div id="division-options-replace">';
    $form['field_division']['und']['#suffix'] = '</div>';
    $form['field_division']['und']['#options'] = division_dropdown_options($value_company);

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Continue'),
        '#weight' => 50
    );
    return $form;
}

function add_inward_movement_form_submit($form, &$form_state) {

    $location_type_name = $form_state['build_info']['args']['0'];
    $inward_type_name = $form_state['build_info']['args']['1'];

    $items = array();
    $items = taxonomy_get_term_by_name($inward_type_name, 'inward_movement_types');
    $item = array_shift($items);

    $company_tid = $form_state['input']['field_company']['und'];
    $division_tid = $form_state['input']['field_division']['und'];

    $form_state['redirect'] = array(
        'node/add/inward-movement/' . $location_type_name . '/' . $company_tid . '/' . $inward_type_name,
        array(
            'query' => array(
                'field_company' => $company_tid,
                'field_division' => $division_tid,
                'field_inward_movement_type' => $item->tid,
            )
        )
    );
}

/*
 * Implementation of Menu Callback form for Add Inward Permit Received
 */

function add_inward_permit_received_form($form, &$form_state) {
    $form = array();
    $node = new stdClass();
    $node->type = 'supply_location';
    my_field_attach_form('field_company', 'node', 'supply_location', $node, $form, $form_state, LANGUAGE_NONE);
    my_field_attach_form('field_location_type', 'node', 'supply_location', $node, $form, $form_state, LANGUAGE_NONE);

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Continue'),
        '#weight' => 5
    );
    return $form;
}

function add_inward_permit_received_form_submit($form, &$form_state) {

    $company_tid = $form_state['input']['field_company']['und'];
    $location_type_tid = $form_state['input']['field_location_type']['und'];

    $location_type_term = taxonomy_term_load($location_type_tid);

    $form_state['redirect'] = array(
        'node/add/inward-permit-received/' . $location_type_term->name . '/' . $company_tid,
        array(
            'query' => array(
                'field_company' => $company_tid
            )
        )
    );
}

/*
 * Implementation of Menu Callback form for Add Outward Permit Received
 */

function add_outward_permit_received_form($form, &$form_state) {
    $form = array();
    $node = new stdClass();
    $node->type = 'supply_location';
    my_field_attach_form('field_company', 'node', 'supply_location', $node, $form, $form_state, LANGUAGE_NONE);
    my_field_attach_form('field_location_type', 'node', 'supply_location', $node, $form, $form_state, LANGUAGE_NONE);

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Continue'),
        '#weight' => 5
    );
    return $form;
}

function add_outward_permit_received_form_submit($form, &$form_state) {

    $company_tid = $form_state['input']['field_company']['und'];
    $location_type_tid = $form_state['input']['field_location_type']['und'];

    $location_type_term = taxonomy_term_load($location_type_tid);

    $form_state['redirect'] = array(
        'node/add/outward-permit-received/' . $location_type_term->name . '/' . $company_tid,
        array(
            'query' => array(
                'field_company' => $company_tid
            )
        )
    );
}