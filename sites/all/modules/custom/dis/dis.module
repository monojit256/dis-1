<?php

/**
 * Implementation of hook_menu()
 */
function dis_menu() {

    $items = array();

	$items['add-associate-executive-mapping'] = array(
        'title' => 'Add Associate Executive Mapping - Select Company and Associate Type',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_associate_executive_mapping_form'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'dis.menu.inc',
    ); 	

    $items['add-outward-invoice'] = array(
        'title' => 'Add Outward Invoice- Select Company and Invoice Type',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_outward_invoice_form'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'dis.menu.inc',
    );  

    $items['add-inward-invoice'] = array(
        'title' => 'Add Inward Invoice- Select Company and Invoice Type',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('add_inward_invoice_form'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'dis.menu.inc',
    );     
    return $items;
}


/**
 * Implementation of hook_form_BASE_FORM_ID_alter() - BASE ID = outward_invoice_node_form
 * This hook used to set the default value of outward type and disbale the field in add/edit forms of Outward Invoice type
 */
function dis_form_outward_invoice_node_form_alter(&$form, &$form_state, $form_id){
   
    if(array_key_exists('field_outward_type', $_GET)){
        $outward_type = $_GET['field_outward_type'];
        if($outward_type == 'Sales Invoice' || $outward_type == 'Stock Transfer Out' || $outward_type == 'Purchase Return'){
            $form['field_outward_type']['und']['#default_value'][0] = $outward_type;
            $form['field_outward_type']['und']['#disabled'] = TRUE;
        }
    }

    if(array_key_exists('#node_edit_form', $form) && $form['#node_edit_form'] == TRUE){
        $form['field_outward_type']['und']['#disabled'] = TRUE;
    }
}

/*
 * Function to return the financial year and quarter for a given date
 * Compatible with 'Set Quarter and FY' Rules Action
 */

function dis_get_quarter_financialyear($invoice_date) {

    //$invoice_date = date("d-m-Y",$invoice_date);
    //$date = format_date($invoice_date, 'custom', 'd-m-Y');
    $d = date_parse($invoice_date);
    $month = $d['month'];
    $year = $d['year'];

    //Determine quarter
    if ($month == '1' || $month == '2' || $month == '3')
        $quarter = 'Q4';
    elseif ($month == '4' || $month == '5' || $month == '6')
        $quarter = 'Q1';
    elseif ($month == '7' || $month == '8' || $month == '9')
        $quarter = 'Q2';
    else
        $quarter = 'Q3';

    //Determine Financial Year
    if ($quarter == 'Q4') {
        $first_year = $year - 1;
        $second_year = $year % 100;
        $financial_year = $first_year . '-' . $second_year;
    } else {
        $first_year = $year;
        $second_year = ($year + 1) % 100;
        $financial_year = $first_year . '-' . $second_year;
    }

    //Fetch Entity ID for Financial Year
    $fy_query = new EntityFieldQuery();
    $fy_query->entityCondition('entity_type', 'taxonomy_term')
            ->entityCondition('bundle', 'financial_year')
            ->propertyCondition('name', $financial_year);
    $fy_result = $fy_query->execute();
    $fy_id = array_shift($fy_result['taxonomy_term'])->tid;

    return array(
        'quarter' => $quarter,
        'financial_year' => $fy_id,
    );
}



/**
 * Implementation of hook_form_BASE_FORM_ID_alter() - BASE ID = outward_invoice_node_form
 * This hook used to set the default value of outward type and disable the field in add/edit forms of Outward Invoice type
 */
function dis_form_views_form_update_dispatch_page_alter(&$form, &$form_state, $form_id){
   
    if($form_state['step'] == 'views_bulk_operations_config_form'){

    //Alter the field Dispatch Date
    $form['parameter']['dispatch_date']['settings']['dispatch_date']['#type'] = 'date_popup';
    $form['parameter']['dispatch_date']['settings']['dispatch_date']['#date_format'] = 'd-m-Y';
    $form['parameter']['dispatch_date']['settings']['dispatch_date']['#description'] = '';

    //Alter the field Dispatch Mode
    $form['parameter']['dispatch_mode']['settings']['dispatch_mode']['#type'] = "select";

    $mode_query = new EntityFieldQuery();
    $mode_query->entityCondition('entity_type', 'taxonomy_term')
                    ->entityCondition('bundle', 'dispatch_mode');                   
    $mode_result = $mode_query->execute();
    if (!empty($mode_result['taxonomy_term'])) {
      $modes = entity_load('taxonomy_term', array_keys($mode_result['taxonomy_term']));
    }
    $options = array();
    foreach($modes as $mode){
        $options[$mode->tid] = $mode->name;
    }
    $form['parameter']['dispatch_mode']['settings']['dispatch_mode']['#options'] = $options;
    $form['parameter']['dispatch_mode']['settings']['dispatch_mode']['#description'] = "";
    unset( $form['parameter']['dispatch_mode']['settings']['help']);

    //Alter the field Vehcicle No
    $form['parameter']['vehicle_no']['settings']['vehicle_no']['#type'] = "textfield";
    unset( $form['parameter']['vehicle_no']['settings']['help']);
}
}

/**
 * Implements hook_element_info_alter() 
 * To remove the description from data_popup
 */
function dis_element_info_alter(&$type) {
  if (isset($type['date_popup'])) {
    $type['date_popup']['#process'][] = 'dis_date_popup_process_alter';
  }
}

/**
 * Function to remove the description from date_popup * 
 */
 function dis_date_popup_process_alter(&$element, &$form_state, $context) {
  unset($element['date']['#description']);
  return $element;
}


/**
 * Implements hook_form_BASEFORMID_alter()
 * Dymanic Views Exposed Filters
 */
function dis_form_views_exposed_form_alter(&$form, &$form_state){
  
  if ($form['#id'] == 'views-exposed-form-view-edit-associate-executive-mapping-page') {
    
    $viewResults = views_get_view_result('division_list', 'entityreference_1', $form_state['input']['field_company_target_id']);

    $associativeArray = array();
    $associativeArray['All'] = t('- Any -');

    foreach($viewResults as $viewRow) {
      $associativeArray[$viewRow->nid] = $viewRow->field_field_division_name[0]['raw']['value'];
    }
       
    $form['field_division_target_id']['#options'] = $associativeArray;
  }
}
